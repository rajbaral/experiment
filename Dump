import { Injectable } from '@angular/core';

declare const Dynamsoft: any;

@Injectable({
  providedIn: 'root'
})
export class DynamsoftScannerService {
  private isReady = false;

  loadDynamsoftViewerScript(containerId: string): Promise<void> {
    return new Promise((resolve, reject) => {
      if ((window as any).Dynamsoft?.DWT?.Viewer) {
        this.initializeViewer(containerId);
        resolve();
        return;
      }

      const script = document.createElement('script');
      script.src = 'https://unpkg.com/dwt@18.4.1/dist/dynamsoft.webtwain.min.js';
      script.onload = () => {
        console.log('[Dynamsoft] Script loaded');
        this.configureCDNResources();
        this.loadViewerAddon().then(() => {
          this.initializeViewer(containerId);
          resolve();
        }).catch(reject);
      };
      script.onerror = () => reject(new Error('Failed to load Dynamsoft script'));

      document.head.appendChild(script);
    });
  }

  private configureCDNResources(): void {
    Dynamsoft.DWT.ResourcesPath = 'https://unpkg.com/dwt@18.4.1/dist/';
    Dynamsoft.DWT.ProductKey = '<YOUR-LICENSE-KEY-HERE>';
  }

  private loadViewerAddon(): Promise<void> {
    return Dynamsoft.DWT.Addon && Dynamsoft.DWT.Addon.Viewer
      ? Dynamsoft.DWT.Addon.Viewer.load()
      : Promise.reject(new Error('Viewer Addon not found'));
  }

  private initializeViewer(containerId: string): void {
    const container = document.getElementById(containerId);
    if (!container) {
      console.error(`[Dynamsoft] Container "${containerId}" not found`);
      return;
    }

    Dynamsoft.DWT.Viewer.createViewer({
      container: container,
      width: '100%',
      height: '500px',
      defaultViewMode: '1x1'
    }).then((viewer: any) => {
      console.log('[Dynamsoft] Viewer initialized');
      this.isReady = true;
    }).catch((err: any) => {
      console.error('[Dynamsoft] Viewer init failed:', err);
    });
  }

  get scannerReady(): boolean {
    return this.isReady;
  }
}








import { Injectable } from '@angular/core';
import Dynamsoft from 'dwt';
import { WebTwain } from 'dwt/dist/types/WebTwain';
import 'dwt/addon/viewer'; // ðŸ‘ˆ Essential to enable Viewer support!

@Injectable({
  providedIn: 'root'
})
export class DynamsoftScannerService {
  private dwtObject: WebTwain | null = null;
  private isReady = false;

  initialize(containerId: string): Promise<void> {
    console.log('[DynamsoftScannerService] Initializing scanner with viewer...');
    return new Promise((resolve, reject) => {
      Dynamsoft.DWT.ResourcesPath = 'https://unpkg.com/dwt@18.2.1/dist/'; // âœ… or use your local node_modules path

      Dynamsoft.DWT.Load()
        .then(() => {
          return Dynamsoft.DWT.Addon.Viewer.load(); // âœ… Load viewer addon
        })
        .then(() => {
          console.log('[DynamsoftScannerService] Viewer module loaded');
          // Create Viewer UI
          Dynamsoft.DWT.Viewer.createViewer({
            container: document.getElementById(containerId) as HTMLDivElement,
            width: '100%',
            height: '600px',
            defaultViewMode: '1',
            enableModeSwitchButton: true,
            enableScanButton: true,
            enableUploadButton: true,
            enableRemoveButton: true,
            enableSaveButton: true,
            view: '1' // one image per row
          });

          const dwt = Dynamsoft.DWT.GetWebTwain(containerId);
          const startTime = Date.now();
          const timeout = 10000;

          const waitForSources = () => {
            if (dwt && dwt.SourceCount > 0) {
              this.dwtObject = dwt;
              this.isReady = true;
              console.log('[DynamsoftScannerService] Scanner is ready');
              resolve();
            } else if (Date.now() - startTime > timeout) {
              reject('Scanner source detection timed out.');
            } else {
              console.log('[DynamsoftScannerService] Waiting for sources...');
              setTimeout(waitForSources, 500);
            }
          };

          waitForSources();
        })
        .catch((err) => {
          console.error('Dynamsoft loading failed:', err);
          reject(err);
        });
    });
  }

  get isScannerReady(): boolean {
    return this.isReady;
  }

  acquireImage(onSuccess: () => void, onError: (err: string) => void): void {
    if (!this.dwtObject || !this.isReady) {
      onError('Scanner not ready.');
      return;
    }

    this.dwtObject.AcquireImage({
      IfShowUI: true,
      IfFeederEnabled: false,
      IfDuplexEnabled: false,
      OnPostAllTransfers: onSuccess,
      OnFailure: (_code: number, errorString: string) => {
        onError('Scan failed: ' + errorString);
      }
    });
  }

  convertToPDFBlob(imageIndices: number[], onSuccess: (blob: Blob) => void, onError: (err: string) => void): void {
    if (!this.dwtObject) {
      onError('Scanner not ready.');
      return;
    }

    this.dwtObject.ConvertToBlob(
      imageIndices,
      Dynamsoft.DWT.EnumDWT_ImageType.IT_PDF,
      (blob: Blob) => {
        if (blob) {
          onSuccess(blob);
        } else {
          onError('Failed to get PDF blob.');
        }
      },
      (_code: number, errorString: string) => {
        onError('Blob conversion error: ' + errorString);
      }
    );
  }

  clearImages(): void {
    if (this.dwtObject && this.isReady) {
      this.dwtObject.RemoveAllImages();
    }
  }

  getImageCount(): number {
    return this.dwtObject?.HowManyImagesInBuffer ?? 0;
  }
}



import { Injectable } from '@angular/core';
import Dynamsoft from 'dwt';
import { WebTwain } from 'dwt/dist/types/WebTwain';

@Injectable({
  providedIn: 'root'
})
export class DynamsoftScannerService {
  private dwtObject: WebTwain | null = null;
  private isReady = false;

  initialize(containerId: string): Promise<void> {
    console.log('[DynamsoftScannerService] Initializing scanner...');
    return new Promise((resolve, reject) => {
      Dynamsoft.DWT.RegisterEvent('OnWebTwainReady', () => {
        const dwt = Dynamsoft.DWT.GetWebTwain(containerId);

        const startTime = Date.now();
        const timeout = 10000;

        const waitForSources = () => {
          if (dwt && dwt.SourceCount > 0) {
            this.dwtObject = dwt;
            this.isReady = true;
            console.log('[DynamsoftScannerService] Scanner is ready');
            resolve();
          } else if (Date.now() - startTime > timeout) {
            reject('Scanner source detection timed out.');
          } else {
            setTimeout(waitForSources, 500);
          }
        };

        waitForSources();
      });

      // Create full viewer UI
      const containerElem = document.getElementById(containerId) as HTMLDivElement;
      if (containerElem) {
        Dynamsoft.DWT.Viewer.createViewer({
          container: containerElem,
          defaultView: 'thumbnail+preview', // adds left-side thumbnails
          width: '100%',
          height: '600px',
          view: {
            bShowToolbar: true,
            bShowStatusBar: true,
            bShowNavigator: true,
            bShowThumbnailViewer: true,
            bShowPreviewViewer: true
          }
        });
      }

      Dynamsoft.DWT.Load();
    });
  }

  get isScannerReady(): boolean {
    return this.isReady;
  }

  acquireImage(onSuccess: () => void, onError: (err: string) => void): void {
    if (!this.dwtObject || !this.isReady) {
      onError('Scanner not ready.');
      return;
    }

    this.dwtObject.AcquireImage({
      IfShowUI: true,
      IfFeederEnabled: false,
      IfDuplexEnabled: false,
      OnPostAllTransfers: onSuccess,
      OnFailure: (_code: number, errorString: string) => {
        onError('Scan failed: ' + errorString);
      }
    });
  }

  convertToPDFBlob(imageIndices: number[], onSuccess: (blob: Blob) => void, onError: (err: string) => void): void {
    if (!this.dwtObject) {
      onError('Scanner not ready.');
      return;
    }

    this.dwtObject.ConvertToBlob(
      imageIndices,
      Dynamsoft.DWT.EnumDWT_ImageType.IT_PDF,
      (blob: Blob) => {
        blob ? onSuccess(blob) : onError('Failed to retrieve PDF blob.');
      },
      (_code: number, errorString: string) => {
        onError('Failed to retrieve PDF blob: ' + errorString);
      }
    );
  }

  clearImages(): void {
    if (this.dwtObject && this.isReady) {
      this.dwtObject.RemoveAllImages();
    }
  }

  getImageCount(): number {
    return this.dwtObject?.HowManyImagesInBuffer ?? 0;
  }
}
