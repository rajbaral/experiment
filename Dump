// src/app/shared/services/dynamsoft-scanner/dynamsoft-scanner.service.ts
import { Injectable } from '@angular/core';
import Dynamsoft from 'dwt';
import { WebTwain } from 'dwt/dist/types/WebTwain';

@Injectable({
  providedIn: 'root'
})
export class DynamsoftScannerService {
  private dwtObject: WebTwain | null = null;
  private isReady = false;

  initialize(containerId: string): Promise<void> {
    console.log('[DynamsoftScannerService] Initializing scanner...');
    return new Promise((resolve, reject) => {
      Dynamsoft.DWT.Containers = [{
        WebTwainId: 'dwtObject',
        ContainerId: containerId,
        Width: '300px',
        Height: '400px'
      }];

      Dynamsoft.DWT.RegisterEvent('OnWebTwainReady', () => {
        console.log('[DynamsoftScannerService] OnWebTwainReady fired');
        const dwt = Dynamsoft.DWT.GetWebTwain(containerId);
        if (!dwt) {
          return reject('Failed to get WebTwain instance.');
        }

        const startTime = Date.now();
        const timeout = 10000; // 10 seconds

        const waitForSources = () => {
          if (dwt.SourceCount > 0) {
            console.log('[DynamsoftScannerService] Sources detected. Prompting user to select one.');
            dwt.SelectSourceAsync().then(() => {
              dwt.OpenSource();
              this.dwtObject = dwt;
              this.isReady = true;
              console.log('[DynamsoftScannerService] Scanner is fully ready and source selected.');
              resolve();
            }).catch((err) => {
              console.error('[DynamsoftScannerService] Failed to select source:', err);
              reject('Failed to select scanner source.');
            });
          } else if (Date.now() - startTime > timeout) {
            reject('Scanner source detection timed out.');
          } else {
            console.log('[DynamsoftScannerService] Waiting for scanner sources...');
            setTimeout(waitForSources, 500);
          }
        };

        waitForSources();
      });

      Dynamsoft.DWT.Load();
    });
  }

  get isScannerReady(): boolean {
    return this.isReady;
  }

  acquireImage(onSuccess: () => void, onError: (err: string) => void): void {
    if (!this.dwtObject || !this.isReady) {
      console.error('[DynamsoftScannerService] Scanner not ready');
      onError('Scanner not ready. Please wait for initialization.');
      return;
    }

    interface AcquireImageOptions {
      IfShowUI: boolean;
      IfFeederEnabled: boolean;
      IfDuplexEnabled: boolean;
      OnPostAllTransfers: () => void;
      OnFailure: (code: number, errorString: string) => void;
    }

    this.dwtObject.AcquireImage({
      IfShowUI: true,
      IfFeederEnabled: true,
      IfDuplexEnabled: false,
      OnPostAllTransfers: onSuccess,
      OnFailure: (_code: number, errorString: string) => {
        console.error('[DynamsoftScannerService] Scan failed:', errorString);
        onError('Scan failed: ' + errorString);
      }
    } as AcquireImageOptions);
  }

  convertToPDFBlob(imageIndices: number[], onSuccess: (blob: Blob) => void, onError: (err: string) => void): void {
    if (!this.dwtObject) {
      onError('Scanner not ready.');
      return;
    }

    this.dwtObject.ConvertToBlob(
      imageIndices,
      Dynamsoft.DWT.EnumDWT_ImageType.IT_PDF,
      (blob: Blob) => {
        if (blob) {
          onSuccess(blob);
        } else {
          onError('Failed to retrieve PDF blob.');
        }
      },
      (_code: number, errorString: string) => {
        onError('Failed to retrieve PDF blob: ' + errorString);
      }
    );
  }

  clearImages(): void {
    if (this.dwtObject && this.isReady) {
      this.dwtObject.RemoveAllImages();
    }
  }

  getImageCount(): number {
    return this.dwtObject?.HowManyImagesInBuffer ?? 0;
  }
}
