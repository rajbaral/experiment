import os
from PyPDF2 import PdfReader, PdfReadError
from sentence_transformers import SentenceTransformer
import faiss
import numpy as np

# Extract text from a single PDF
def extract_text_from_pdf(pdf_path):
    try:
        reader = PdfReader(pdf_path)
        text = ""
        for page in reader.pages:
            text += page.extract_text() or ""  # Ensure no None is added
        return text
    except PdfReadError as e:
        print(f"Error reading {pdf_path}: {e}")
        return ""  # Return an empty string if the PDF is corrupted or unreadable

# Process all PDFs in a folder and combine text
def extract_text_from_folder(folder_path):
    all_text = ""
    for file in os.listdir(folder_path):
        if file.endswith(".pdf"):
            file_path = os.path.join(folder_path, file)
            text = extract_text_from_pdf(file_path)
            if text:
                all_text += text + "\n"
            else:
                print(f"Skipping {file} due to an error.")
    return all_text



// <meta http-equiv="Content-Security-Policy" content="default-src 'self' https: localhost:* https://*.maze.co/; img-src 'self' https: localhost:* data:; script-src 'unsafe-inline' 'unsafe-eval' https: localhost:*; connect-src 'self' https: localhost:* ws://localhost:* wss://local.scannerjs.com:9714; style-src 'unsafe-inline' https:; object-src 'none'; worker-src blob:;">


import { HttpClient } from '@angular/common/http';
import { Component, OnInit } from '@angular/core';

declare const scanner: any;

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit {
  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.loadScannerScript();
  }

  loadScannerScript(): void {
    const existingScript = document.getElementById('asprise-scanner') as HTMLScriptElement;
    if (!existingScript) {
      const script = document.createElement('script');
      script.src = 'https://asprise.azureedge.net/scannerjs/scanner.js'; // Or use local path
      script.id = 'asprise-scanner';
      script.type = 'text/javascript';

      script.onload = () => {
        console.log('Scanner.js loaded');
        this.loadLicenseKey(); // âœ… Load and assign license here
      };

      script.onerror = () => {
        console.error('Failed to load scanner.js');
      };

      document.body.appendChild(script);
    }
  }

  loadLicenseKey(): void {
    this.http.get<{ scannerLicenseKey: string }>('/assets/runtime-config.json').subscribe({
      next: config => {
        if (typeof scanner !== 'undefined') {
          scanner.licenseKey = config.scannerLicenseKey;
          console.log('Scanner license key applied.');
        }
      },
      error: err => {
        console.error('Failed to load license key from config', err);
      }
    });
  }
}
